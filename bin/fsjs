#!/usr/bin/env node
var program = require('commander')
  , archy = require('archy')
  , colors = require('colors')
  , fsls = require('../fsls');

program
  .version(require('../package.json').version)
  .usage('[options] ["glob pattern"]')
  .option('-c, --cwd <cwd>', 'Use this instead of actual cwd')
  .option('-d, --depth <depth>', 'Max depth of tree to print')
  .option('-s, --structure', 'Only show directory structure, no files')
  .option('-p, --plain', 'No unicode characters')
  .option('--no-color', 'Do not colorize output')
  .parse(process.argv);

var options = {
  color: true,
  unicode: true
};
if (program.cwd) {
  options.cwd = program.cwd;
}
if (program.depth) {
  options.depth = program.depth;
}
if (program.structure) {
  options.structure = true;
}
if (program.args.length === 1) {
  options.pattern = program.args.pop();
}
if (program.plain) {
  options.unicode = false;
}
if (program.color !== options.color) {
  options.color = program.color;
}

fsls(options, function (err, nodes) {
  if (err) return console.error(err);
  if (options.color) colorize(nodes);
  console.log(archy(nodes, ' ', options));
});

function colorize (nodes) {
  Object.keys(nodes).forEach(function (key) {
    if (key === 'label') {
      // Do nothing.
    }
    else if (typeof nodes[key] === 'string') {
      nodes[key] = nodes[key];
    }
    else {
      if (nodes[key].label) {
        nodes[key].label = nodes[key].label.bold;
      }
      colorize(nodes[key]);
    }
  });
}
